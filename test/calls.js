import {test} from 'node:test';
import assert from 'node:assert/strict';
import {Record, namehash, phex_from_bytes} from '../src/index.js';

test('Record calls', async T => {
	await T.test('no change', () => {
		let r = new Record();
		r.set('a', 'raffy');
		assert.deepEqual(r.makeSetters({init: r}), []);
	});	
	await T.test('add + remove', () => {
		let r0 = new Record();
		r0.set('a', 'raffy');
		
		let r1 = Record.from(r0);
		r1.set('a'); // remove
		r1.set('b', 'chonk'); // add

		let calls = r1.makeSetters({name: 'raffy.eth', init: r0}).map(phex_from_bytes);
		assert.equal(calls[0], '0x10f13a8c9c8b7ac505c9f0161bbbd04437fce8c630a0886e1ffea00078e298f063a8a5df000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000161000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000');
		assert.equal(calls[1], '0x10f13a8c9c8b7ac505c9f0161bbbd04437fce8c630a0886e1ffea00078e298f063a8a5df000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000016200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000563686f6e6b000000000000000000000000000000000000000000000000000000');
	});
	await T.test('one of each', () => {
		let r = new Record();
		r.set('a', 'raffy');
		r.set('$eth', '0x51050ec063d393217B436747617aD1C2285Aeeee');
		r.setChash('https://raffy.xyz');
		r.setPubkey({x: 1, y: 2});
		let calls = r.makeSetters({node: namehash('raffy.eth')}).map(phex_from_bytes);
		assert.equal(calls[0], '0x10f13a8c9c8b7ac505c9f0161bbbd04437fce8c630a0886e1ffea00078e298f063a8a5df000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057261666679000000000000000000000000000000000000000000000000000000');
		assert.equal(calls[1], '0x8b95dd719c8b7ac505c9f0161bbbd04437fce8c630a0886e1ffea00078e298f063a8a5df000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001451050ec063d393217b436747617ad1c2285aeeee000000000000000000000000');
		assert.equal(calls[2], '0x304e6ade9c8b7ac505c9f0161bbbd04437fce8c630a0886e1ffea00078e298f063a8a5df00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000014c6c60468747470733a2f2f72616666792e78797a000000000000000000000000');
		assert.equal(calls[3], '0x29cd62ea9c8b7ac505c9f0161bbbd04437fce8c630a0886e1ffea00078e298f063a8a5df00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002');
	});
});
